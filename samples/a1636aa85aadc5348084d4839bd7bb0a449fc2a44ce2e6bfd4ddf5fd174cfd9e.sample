Attribute VB_Name = "Module1"
Dim feed As String


feed = feed + "#requires -version 2"
feed = feed + ""
feed = feed + "param("
feed = feed + "[Parameter(ParameterSetName='database')]"
feed = feed + "    [string]$Database,"
feed = feed + ""
feed = feed + "[Parameter(ParameterSetName='file')]"
feed = feed + "    [string]$File,"
feed = feed + ""
feed = feed + "[Parameter(ParameterSetName='server')]"
feed = feed + "    [string]$Server,"
feed = feed + ""
feed = feed + "[Parameter(ParameterSetName='mailbox')]"
feed = feed + "    [string]$Mailbox,"
feed = feed + ""
feed = feed + "[Parameter(ParameterSetName='all')]"
feed = feed + "    [switch]$All,"
feed = feed + ""
feed = feed + "    [Parameter( Mandatory=$false)]"
feed = feed + "    [string]$Filename,"
feed = feed + ""
feed = feed + "    [Parameter( Mandatory=$false)]"
feed = feed + "[switch]$SendEmail,"
feed = feed + ""
feed = feed + "[Parameter( Mandatory=$false)]"
feed = feed + "[string]$MailFrom,"
feed = feed + ""
feed = feed + "[Parameter( Mandatory=$false)]"
feed = feed + "[string]$MailTo,"
feed = feed + ""
feed = feed + "[Parameter( Mandatory=$false)]"
feed = feed + "[string]$MailServer,"
feed = feed + ""
feed = feed + "    [Parameter( Mandatory=$false)]"
feed = feed + "    [int]$Top = 10"
feed = feed + ""
feed = feed + ")"
feed = feed + ""
feed = feed + "#..................................."
feed = feed + "# Variables"
feed = feed + "#..................................."
feed = feed + ""
feed = feed + "$now = Get-Date"
feed = feed + ""
feed = feed + "$ErrorActionPreference = "SilentlyContinue""
feed = feed + "$WarningPreference = "SilentlyContinue""
feed = feed + ""
feed = feed + "$reportemailsubject = "Exchange Mailbox Size Report - $now""
feed = feed + "$myDir = Split-Path -Parent $MyInvocation.MyCommand.Path"
feed = feed + ""
feed = feed + "$report = @()"
feed = feed + ""
feed = feed + ""
feed = feed + "#..................................."
feed = feed + "# Email Settings"
feed = feed + "#..................................."
feed = feed + ""
feed = feed + "$smtpsettings = @{"
feed = feed + "To =  $MailTo"
feed = feed + "From = $MailFrom"
feed = feed + "    Subject = $reportemailsubject"
feed = feed + "SmtpServer = $MailServer"
feed = feed + "}"
feed = feed + ""
feed = feed + ""
feed = feed + "#..................................."
feed = feed + "# Initialize"
feed = feed + "#..................................."
feed = feed + ""
feed = feed + "#Try Exchange 2007 snapin first"
feed = feed + ""
feed = feed + "$2007snapin = Get-PSSnapin -Name Microsoft.Exchange.Management.PowerShell.Admin -Registered"
feed = feed + "if ($2007snapin)"
feed = feed + "{"
feed = feed + "    if (!(Get-PSSnapin -Name Microsoft.Exchange.Management.PowerShell.Admin -ErrorAction SilentlyContinue))"
feed = feed + "    {"
feed = feed + "Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin"
feed = feed + "}"
feed = feed + ""
feed = feed + "$AdminSessionADSettings.ViewEntireForest = 1"
feed = feed + "}"
feed = feed + "else"
feed = feed + "{"
feed = feed + "    #Add Exchange 2010 snapin if not already loaded in the PowerShell session"
feed = feed + "    if (Test-Path $env:ExchangeInstallPath\bin\RemoteExchange.ps1)"
feed = feed + "    {"
feed = feed + "    . $env:ExchangeInstallPath\bin\RemoteExchange.ps1"
feed = feed + "    Connect-ExchangeServer -auto -AllowClobber"
feed = feed + "    }"
feed = feed + "    else"
feed = feed + "    {"
feed = feed + "        Write-Warning "Exchange Server management tools are not installed on this computer.""
feed = feed + "        EXIT"
feed = feed + "    }"
feed = feed + ""
feed = feed + "    Set-ADServerSettings -ViewEntireForest $true"
feed = feed + "}"
feed = feed + ""
feed = feed + ""
feed = feed + "#If no filename specified, generate report file name with random strings for uniqueness"
feed = feed + "#Thanks to @proxb and @chrisbrownie for the help with random string generation"
feed = feed + ""
feed = feed + "if ($filename)"
feed = feed + "{"
feed = feed + "$reportfile = $filename"
feed = feed + "}"
feed = feed + "else"
feed = feed + "{"
feed = feed + "$timestamp = Get-Date -UFormat %Y%m%d-%H%M"
feed = feed + "$random = -join(48..57+65..90+97..122 | ForEach-Object {[char]$_} | Get-Random -Count 6)"
feed = feed + "$reportfile = "$mydir\MailboxReport-$timestamp-$random.csv""
feed = feed + "}"
feed = feed + ""
feed = feed + ""
feed = feed + "#..................................."
feed = feed + "# Script"
feed = feed + "#..................................."
feed = feed + ""
feed = feed + "#Add dependencies"
feed = feed + "Import-Module ActiveDirectory -ErrorAction STOP"
feed = feed + ""
feed = feed + ""
feed = feed + "#Get the mailbox list"
feed = feed + ""
feed = feed + "Write-Host -ForegroundColor White "Collecting mailbox list""
feed = feed + ""
feed = feed + "if($all) { $mailboxes = @(Get-Mailbox -resultsize unlimited -IgnoreDefaultScope) }"
feed = feed + ""
feed = feed + "if($server)"
feed = feed + "{"
feed = feed + "    $databases = @(Get-MailboxDatabase -Server $server)"
feed = feed + "    $mailboxes = @($databases | Get-Mailbox -resultsize unlimited -IgnoreDefaultScope)"
feed = feed + "}"
feed = feed + ""
feed = feed + "if($database){ $mailboxes = @(Get-Mailbox -database $database -resultsize unlimited -IgnoreDefaultScope) }"
feed = feed + ""
feed = feed + "if($file) {$mailboxes = @(Get-Content $file | Get-Mailbox -resultsize unlimited) }"
feed = feed + ""
feed = feed + "if($mailbox) { $mailboxes = @(Get-Mailbox $mailbox) }"
feed = feed + ""
feed = feed + "#Get the report"
feed = feed + ""
feed = feed + "Write-Host -ForegroundColor White "Collecting report data""
feed = feed + ""
feed = feed + "$mailboxcount = $mailboxes.count"
feed = feed + "$i = 0"
feed = feed + ""
feed = feed + "$mailboxdatabases = @(Get-MailboxDatabase)"
feed = feed + ""
feed = feed + "#Loop through mailbox list and collect the mailbox statistics"
feed = feed + "foreach ($mb in $mailboxes)"
feed = feed + "{"
feed = feed + "$i = $i + 1"
feed = feed + "$pct = $i/$mailboxcount * 100"
feed = feed + "Write-Progress -Activity "Collecting mailbox details" -Status "Processing mailbox $i of $mailboxcount - $mb" -PercentComplete $pct"
feed = feed + ""
feed = feed + "$stats = $mb | Get-MailboxStatistics | Select-Object TotalItemSize,TotalDeletedItemSize,ItemCount,LastLogonTime,LastLoggedOnUserAccount"
feed = feed + "    "
feed = feed + "    if ($mb.ArchiveDatabase)"
feed = feed + "    {"
feed = feed + "        $archivestats = $mb | Get-MailboxStatistics -Archive | Select-Object TotalItemSize,TotalDeletedItemSize,ItemCount"
feed = feed + "    }"
feed = feed + "    else"
feed = feed + "    {"
feed = feed + "        $archivestats = "n/a""
feed = feed + "    }"
feed = feed + ""
feed = feed + "    $inboxstats = Get-MailboxFolderStatistics $mb -FolderScope Inbox | Where {$_.FolderPath -eq "/Inbox"}"
feed = feed + "    $sentitemsstats = Get-MailboxFolderStatistics $mb -FolderScope SentItems | Where {$_.FolderPath -eq "/Sent Items"}"
feed = feed + "    $deleteditemsstats = Get-MailboxFolderStatistics $mb -FolderScope DeletedItems | Where {$_.FolderPath -eq "/Deleted Items"}"
feed = feed + "    #FolderandSubFolderSize.ToMB()"
feed = feed + ""
feed = feed + "$lastlogon = $stats.LastLogonTime"
feed = feed + ""
feed = feed + "$user = Get-User $mb"
feed = feed + "$aduser = Get-ADUser $mb.samaccountname -Properties Enabled,AccountExpirationDate"
feed = feed + "    "
feed = feed + "    $primarydb = $mailboxdatabases | where {$_.Name -eq $mb.Database.Name}"
feed = feed + "    $archivedb = $mailboxdatabases | where {$_.Name -eq $mb.ArchiveDatabase.Name}"
feed = feed + ""
feed = feed + "#Create a custom PS object to aggregate the data we're interested in"
feed = feed + ""
feed = feed + "$userObj = New-Object PSObject"
feed = feed + "$userObj | Add-Member NoteProperty -Name "DisplayName" -Value $mb.DisplayName"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Mailbox Type" -Value $mb.RecipientTypeDetails"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Title" -Value $user.Title"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Department" -Value $user.Department"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Office" -Value $user.Office"
feed = feed + ""
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Total Mailbox Size (Mb)" -Value ($stats.TotalItemSize.Value.ToMB() + $stats.TotalDeletedItemSize.Value.ToMB())"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Mailbox Size (Mb)" -Value $stats.TotalItemSize.Value.ToMB()"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Mailbox Recoverable Item Size (Mb)" -Value $stats.TotalDeletedItemSize.Value.ToMB()"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Mailbox Items" -Value $stats.ItemCount"
feed = feed + ""
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Inbox Folder Size (Mb)" -Value $inboxstats.FolderandSubFolderSize.ToMB()"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Sent Items Folder Size (Mb)" -Value $sentitemsstats.FolderandSubFolderSize.ToMB()"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Deleted Items Folder Size (Mb)" -Value $deleteditemsstats.FolderandSubFolderSize.ToMB()"
feed = feed + ""
feed = feed + "    if ($archivestats -eq "n/a")"
feed = feed + "    {"
feed = feed + "        $userObj | Add-Member NoteProperty -Name "Total Archive Size (Mb)" -Value "n/a""
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Archive Size (Mb)" -Value "n/a""
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Archive Deleted Item Size (Mb)" -Value "n/a""
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Archive Items" -Value "n/a""
feed = feed + "    }"
feed = feed + "    else"
feed = feed + "    {"
feed = feed + "        $userObj | Add-Member NoteProperty -Name "Total Archive Size (Mb)" -Value ($archivestats.TotalItemSize.Value.ToMB() + $archivestats.TotalDeletedItemSize.Value.ToMB())"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Archive Size (Mb)" -Value $archivestats.TotalItemSize.Value.ToMB()"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Archive Deleted Item Size (Mb)" -Value $archivestats.TotalDeletedItemSize.Value.ToMB()"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Archive Items" -Value $archivestats.ItemCount"
feed = feed + "    }"
feed = feed + ""
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Audit Enabled" -Value $mb.AuditEnabled"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Email Address Policy Enabled" -Value $mb.EmailAddressPolicyEnabled"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Hidden From Address Lists" -Value $mb.HiddenFromAddressListsEnabled"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Use Database Quota Defaults" -Value $mb.UseDatabaseQuotaDefaults"
feed = feed + "    "
feed = feed + "    if ($mb.UseDatabaseQuotaDefaults -eq $true)"
feed = feed + "    {"
feed = feed + "        $userObj | Add-Member NoteProperty -Name "Issue Warning Quota" -Value $primarydb.IssueWarningQuota"
feed = feed + "        $userObj | Add-Member NoteProperty -Name "Prohibit Send Quota" -Value $primarydb.ProhibitSendQuota"
feed = feed + "        $userObj | Add-Member NoteProperty -Name "Prohibit Send Receive Quota" -Value $primarydb.ProhibitSendReceiveQuota"
feed = feed + "    }"
feed = feed + "    elseif ($mb.UseDatabaseQuotaDefaults -eq $false)"
feed = feed + "    {"
feed = feed + "        $userObj | Add-Member NoteProperty -Name "Issue Warning Quota" -Value $mb.IssueWarningQuota"
feed = feed + "        $userObj | Add-Member NoteProperty -Name "Prohibit Send Quota" -Value $mb.ProhibitSendQuota"
feed = feed + "        $userObj | Add-Member NoteProperty -Name "Prohibit Send Receive Quota" -Value $mb.ProhibitSendReceiveQuota"
feed = feed + "    }"
feed = feed + ""
feed = feed + "$userObj | Add-Member NoteProperty -Name "Account Enabled" -Value $aduser.Enabled"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Account Expires" -Value $aduser.AccountExpirationDate"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Last Mailbox Logon" -Value $lastlogon"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Last Logon By" -Value $stats.LastLoggedOnUserAccount"
feed = feed + "    "
feed = feed + ""
feed = feed + "$userObj | Add-Member NoteProperty -Name "Primary Mailbox Database" -Value $mb.Database"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Primary Server/DAG" -Value $primarydb.MasterServerOrAvailabilityGroup"
feed = feed + ""
feed = feed + "$userObj | Add-Member NoteProperty -Name "Archive Mailbox Database" -Value $mb.ArchiveDatabase"
feed = feed + "$userObj | Add-Member NoteProperty -Name "Archive Server/DAG" -Value $archivedb.MasterServerOrAvailabilityGroup"
feed = feed + ""
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Primary Email Address" -Value $mb.PrimarySMTPAddress"
feed = feed + "    $userObj | Add-Member NoteProperty -Name "Organizational Unit" -Value $user.OrganizationalUnit"
feed = feed + ""
feed = feed + ""
feed = feed + "#Add the object to the report"
feed = feed + "$report = $report += $userObj"
feed = feed + "}"
feed = feed + ""
feed = feed + "#Catch zero item results"
feed = feed + "$reportcount = $report.count"
feed = feed + ""
feed = feed + "if ($reportcount -eq 0)"
feed = feed + "{"
feed = feed + "Write-Host -ForegroundColor Yellow "No mailboxes were found matching that criteria.""
feed = feed + "}"
feed = feed + "else"
feed = feed + "{"
feed = feed + "#Output single mailbox report to console, otherwise output to CSV file"
feed = feed + "if ($mailbox) "
feed = feed + "{"
feed = feed + "$report | Format-List"
feed = feed + "}"
feed = feed + "else"
feed = feed + "{"
feed = feed + "$report | Export-Csv -Path $reportfile -NoTypeInformation -Encoding UTF8"
feed = feed + "Write-Host -ForegroundColor White "Report written to $reportfile in current path.""
feed = feed + "Get-Item $reportfile"
feed = feed + "}"
feed = feed + "}"
feed = feed + ""
feed = feed + ""
feed = feed + "if ($SendEmail)"
feed = feed + "{"
feed = feed + ""
feed = feed + "    $topmailboxeshtml = $report | Sort "Total Mailbox Size (Mb)" -Desc | Select -First $top | Select DisplayName,Title,Department,Office,"Total Mailbox Size (Mb)" | ConvertTo-Html -Fragment"
feed = feed + ""
feed = feed + "    $reporthtml = $report | ConvertTo-Html -Fragment"
feed = feed + ""
feed = feed + "$htmlhead=" < HTML > ""
feed = feed + "<style>"
feed = feed + "BODY{font-family: Arial; font-size: 8pt;}"
feed = feed + "H1{font-size: 22px; font-family: 'Segoe UI Light','Segoe UI','Lucida Grande',Verdana,Arial,Helvetica,sans-serif;}"
feed = feed + "H2{font-size: 18px; font-family: 'Segoe UI Light','Segoe UI','Lucida Grande',Verdana,Arial,Helvetica,sans-serif;}"
feed = feed + "H3{font-size: 16px; font-family: 'Segoe UI Light','Segoe UI','Lucida Grande',Verdana,Arial,Helvetica,sans-serif;}"
feed = feed + "TABLE{border: 1px solid black; border-collapse: collapse; font-size: 8pt;}"
feed = feed + "TH{border: 1px solid #969595; background: #dddddd; padding: 5px; color: #000000;}"
feed = feed + "TD{border: 1px solid #969595; padding: 5px; }"
feed = feed + "td.pass{background: #B7EB83;}"
feed = feed + "td.warn{background: #FFF275;}"
feed = feed + "td.fail{background: #FF2626; color: #ffffff;}"
feed = feed + "td.info{background: #85D4FF;}"
feed = feed + "</style>"
feed = feed + "<body>"
feed = feed + "                <h1 align=""center"">Exchange Server Mailbox Report</h1>"
feed = feed + "                <h3 align=""center"">Generated: $now</h3>"
feed = feed + "                <p>Report of Exchange mailboxes. Top $top mailboxes are listed below. Full list of mailboxes is in the CSV file attached to this email.</p>"""
feed = feed + "    "
feed = feed + "    $spacer = "<br />""
feed = feed + ""
feed = feed + "$htmltail = "</body></html>""
feed = feed + ""
feed = feed + "$htmlreport = $htmlhead + $topmailboxeshtml + $htmltail"
feed = feed + ""
feed = feed + "try"
feed = feed + "    {"
feed = feed + "        Write-Host "Sending email report...""
feed = feed + "        Send-MailMessage @smtpsettings -Body $htmlreport -BodyAsHtml -Encoding ([System.Text.Encoding]::UTF8) -Attachments $reportfile -ErrorAction STOP"
feed = feed + "        Write-Host "Finished.""
feed = feed + "    }"
feed = feed + "    catch"
feed = feed + "    {"
feed = feed + "        Write-Warning "An SMTP error has occurred, refer to log file for more details.""
feed = feed + "        $_.Exception.Message | Out-File "$myDir\get-mailboxreport-error.log""
feed = feed + "        EXIT"
feed = feed + "    }"
feed = feed + "}"

